<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Conflux.Address</name>
    </assembly>
    <members>
        <member name="T:Conflux.Address.Base16">
            <summary>
            Base16 encoding/decoding.
            </summary>
        </member>
        <member name="M:Conflux.Address.Base16.#ctor(Conflux.Address.Base16Alphabet)">
            <summary>
            Initializes a new instance of the <see cref="T:Conflux.Address.Base16"/> class.
            </summary>
            <param name="alphabet">Alphabet to use.</param>
        </member>
        <member name="P:Conflux.Address.Base16.UpperCase">
            <summary>
            Gets upper case Base16 encoder. Decoding is case-insensitive.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base16.LowerCase">
            <summary>
            Gets lower case Base16 encoder. Decoding is case-insensitive.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base16.ModHex">
            <summary>
            Gets lower case Base16 encoder. Decoding is case-insensitive.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base16.Alphabet">
            <summary>
            Gets the alphabet used by the encoder.
            </summary>
        </member>
        <member name="M:Conflux.Address.Base16.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base16.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base16.GetSafeByteCountForDecoding(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base16.GetSafeCharCountForEncoding(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base16.EncodeUpper(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode to Base16 representation using uppercase lettering.
            </summary>
            <param name="bytes">Bytes to encode.</param>
            <returns>Base16 string.</returns>
        </member>
        <member name="M:Conflux.Address.Base16.EncodeLower(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode to Base16 representation using lowercase lettering.
            </summary>
            <param name="bytes">Bytes to encode.</param>
            <returns>Base16 string.</returns>
        </member>
        <member name="M:Conflux.Address.Base16.EncodeUpper(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encodes stream of bytes into a Base16 text.
            </summary>
            <param name="input">Stream that provides bytes to be encoded.</param>
            <param name="output">Stream that the encoded text is written to.</param>
        </member>
        <member name="M:Conflux.Address.Base16.EncodeUpperAsync(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encodes stream of bytes into a Base16 text.
            </summary>
            <param name="input">Stream that provides bytes to be encoded.</param>
            <param name="output">Stream that the encoded text is written to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Conflux.Address.Base16.EncodeLower(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encodes stream of bytes into a Base16 text.
            </summary>
            <param name="input">Stream that provides bytes to be encoded.</param>
            <param name="output">Stream that the encoded text is written to.</param>
        </member>
        <member name="M:Conflux.Address.Base16.EncodeLowerAsync(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encodes stream of bytes into a Base16 text.
            </summary>
            <param name="input">Stream that provides bytes to be encoded.</param>
            <param name="output">Stream that the encoded text is written to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Conflux.Address.Base16.Decode(System.String)">
            <summary>
            Decode Upper/Lowercase Base16 text into bytes.
            </summary>
            <param name="text">Hex string.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="M:Conflux.Address.Base16.DecodeAsync(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode Base16 text through streams for generic use. Stream based variant tries to consume
            as little memory as possible, and relies of .NET's own underlying buffering mechanisms,
            contrary to their buffer-based versions.
            </summary>
            <param name="input">Stream that the encoded bytes would be read from.</param>
            <param name="output">Stream where decoded bytes will be written to.</param>
            <returns>Task that represents the async operation.</returns>
        </member>
        <member name="M:Conflux.Address.Base16.Decode(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode Base16 text through streams for generic use. Stream based variant tries to consume
            as little memory as possible, and relies of .NET's own underlying buffering mechanisms,
            contrary to their buffer-based versions.
            </summary>
            <param name="input">Stream that the encoded bytes would be read from.</param>
            <param name="output">Stream where decoded bytes will be written to.</param>
        </member>
        <member name="M:Conflux.Address.Base16.Encode(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encodes stream of bytes into a Base16 text.
            </summary>
            <param name="input">Stream that provides bytes to be encoded.</param>
            <param name="output">Stream that the encoded text is written to.</param>
        </member>
        <member name="M:Conflux.Address.Base16.EncodeAsync(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encodes stream of bytes into a Base16 text.
            </summary>
            <param name="input">Stream that provides bytes to be encoded.</param>
            <param name="output">Stream that the encoded text is written to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Conflux.Address.Base16.Decode(System.ReadOnlySpan{System.Char})">
            <summary>
            Decode Base16 text into bytes.
            </summary>
            <param name="text">Base16 text.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="M:Conflux.Address.Base16.TryDecode(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base16.Encode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode to Base16 representation.
            </summary>
            <param name="bytes">Bytes to encode.</param>
            <returns>Base16 string.</returns>
        </member>
        <member name="M:Conflux.Address.Base16.TryEncode(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="T:Conflux.Address.Base16Alphabet">
            <summary>
            Alphabet representation for Base16 encodings.
            </summary>
        </member>
        <member name="M:Conflux.Address.Base16Alphabet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conflux.Address.Base16Alphabet"/> class with
            case insensitive semantics.
            </summary>
            <param name="alphabet">Encoding alphabet.</param>
        </member>
        <member name="M:Conflux.Address.Base16Alphabet.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conflux.Address.Base16Alphabet"/> class.
            </summary>
            <param name="alphabet">Encoding alphabet.</param>
            <param name="caseSensitive">If the decoding should be performed case sensitive.</param>
        </member>
        <member name="P:Conflux.Address.Base16Alphabet.UpperCase">
            <summary>
            Gets upper case Base16 alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base16Alphabet.LowerCase">
            <summary>
            Gets lower case Base16 alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base16Alphabet.ModHex">
            <summary>
            Gets ModHex Base16 alphabet, used by Yubico apps.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base16Alphabet.CaseSensitive">
            <summary>
            Gets a value indicating whether the decoding should be performed in a case sensitive fashion.
            The default is false.
            </summary>
        </member>
        <member name="P:Conflux.Address.OldAddress.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:Conflux.Address.OldAddress.NetworkID">
            <summary>
            Network ID
            </summary>
        </member>
        <member name="P:Conflux.Address.OldAddress.IsValid">
            <summary>
            Is Valid
            </summary>
        </member>
        <member name="T:Conflux.Address.Base32">
            <summary>
            Base32 encoding/decoding functions.
            </summary>
        </member>
        <member name="M:Conflux.Address.Base32.#ctor(Conflux.Address.Base32Alphabet)">
            <summary>
            Initializes a new instance of the <see cref="T:Conflux.Address.Base32"/> class with a
            custom alphabet.
            </summary>
            <param name="alphabet">Alphabet to use.</param>
        </member>
        <member name="P:Conflux.Address.Base32.Crockford">
            <summary>
            Gets Douglas Crockford's Base32 flavor with substitution characters.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base32.Rfc4648">
            <summary>
            Gets RFC 4648 variant of Base32 coder.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base32.ExtendedHex">
            <summary>
            Gets Extended Hex variant of Base32 coder.
            </summary>
            <remarks>Also from RFC 4648.</remarks>
        </member>
        <member name="P:Conflux.Address.Base32.ZBase32">
            <summary>
            Gets z-base-32 variant of Base32 coder.
            </summary>
            <remarks>This variant is used in Mnet, ZRTP and Tahoe-LAFS.</remarks>
        </member>
        <member name="P:Conflux.Address.Base32.Geohash">
            <summary>
            Gets Geohash variant of Base32 coder.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base32.Alphabet">
            <summary>
            Gets the encoding alphabet.
            </summary>
        </member>
        <member name="M:Conflux.Address.Base32.GetSafeByteCountForDecoding(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base32.GetSafeCharCountForEncoding(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base32.Encode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode a byte array into a Base32 string without padding.
            </summary>
            <param name="bytes">Buffer to be encoded.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Conflux.Address.Base32.Encode(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Encode a byte array into a Base32 string.
            </summary>
            <param name="bytes">Buffer to be encoded.</param>
            <param name="padding">Append padding characters in the output.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Conflux.Address.Base32.Decode(System.ReadOnlySpan{System.Char})">
            <summary>
            Decode a Base32 encoded string into a byte array.
            </summary>
            <param name="text">Encoded Base32 string.</param>
            <returns>Decoded byte array.</returns>
        </member>
        <member name="M:Conflux.Address.Base32.Encode(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encode a binary stream to a Base32 text stream without padding.
            </summary>
            <param name="input">Input bytes.</param>
            <param name="output">The writer the output is written to.</param>
        </member>
        <member name="M:Conflux.Address.Base32.Encode(System.IO.Stream,System.IO.TextWriter,System.Boolean)">
            <summary>
            Encode a binary stream to a Base32 text stream.
            </summary>
            <param name="input">Input bytes.</param>
            <param name="output">The writer the output is written to.</param>
            <param name="padding">Whether to use padding at the end of the output.</param>
        </member>
        <member name="M:Conflux.Address.Base32.EncodeAsync(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encode a binary stream to a Base32 text stream without padding.
            </summary>
            <param name="input">Input bytes.</param>
            <param name="output">The writer the output is written to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Conflux.Address.Base32.EncodeAsync(System.IO.Stream,System.IO.TextWriter,System.Boolean)">
            <summary>
            Encode a binary stream to a Base32 text stream.
            </summary>
            <param name="input">Input bytes.</param>
            <param name="output">The writer the output is written to.</param>
            <param name="padding">Whether to use padding at the end of the output.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Conflux.Address.Base32.Decode(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode a text stream into a binary stream.
            </summary>
            <param name="input">TextReader open on the stream.</param>
            <param name="output">Binary output stream.</param>
        </member>
        <member name="M:Conflux.Address.Base32.DecodeAsync(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode a text stream into a binary stream.
            </summary>
            <param name="input">TextReader open on the stream.</param>
            <param name="output">Binary output stream.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Conflux.Address.Base32.TryEncode(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base32.TryEncode(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Boolean,System.Int32@)">
            <summary>
            Encode to the given preallocated buffer.
            </summary>
            <param name="bytes">Input bytes.</param>
            <param name="output">Output buffer.</param>
            <param name="padding">Whether to use padding characters at the end.</param>
            <param name="numCharsWritten">Number of characters written to the output.</param>
            <returns>True if encoding is successful, false if the output is invalid.</returns>
        </member>
        <member name="M:Conflux.Address.Base32.TryDecode(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="T:Conflux.Address.Base32Alphabet">
            <summary>
            Base32 alphabet flavors.
            </summary>
        </member>
        <member name="M:Conflux.Address.Base32Alphabet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conflux.Address.Base32Alphabet"/> class.
            </summary>
            <param name="alphabet">Characters.</param>
        </member>
        <member name="M:Conflux.Address.Base32Alphabet.#ctor(System.String,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Conflux.Address.Base32Alphabet"/> class.
            </summary>
            <param name="alphabet">Encoding alphabet to use.</param>
            <param name="paddingChar">Padding character.</param>
        </member>
        <member name="P:Conflux.Address.Base32Alphabet.Crockford">
            <summary>
            Gets Crockford alphabet.
            </summary>gpg
        </member>
        <member name="P:Conflux.Address.Base32Alphabet.Rfc4648">
            <summary>
            Gets RFC4648 alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base32Alphabet.ExtendedHex">
            <summary>
            Gets Extended Hex alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base32Alphabet.ZBase32">
            <summary>
            Gets z-base-32 alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base32Alphabet.Geohash">
            <summary>
            Gets Geohash alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base32Alphabet.PaddingChar">
            <summary>
            Gets the padding character used in encoding.
            </summary>
        </member>
        <member name="T:Conflux.Address.Base58">
            <summary>
            Base58 Encoding/Decoding implementation.
            </summary>
            <remarks>
            Base58 doesn't implement a Stream-based interface because it's not feasible to use
            on large buffers.
            </remarks>
        </member>
        <member name="M:Conflux.Address.Base58.#ctor(Conflux.Address.Base58Alphabet)">
            <summary>
            Initializes a new instance of the <see cref="T:Conflux.Address.Base58"/> class
            using a custom alphabet.
            </summary>
            <param name="alphabet">Alphabet to use.</param>
        </member>
        <member name="P:Conflux.Address.Base58.Bitcoin">
            <summary>
            Gets Bitcoin flavor.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base58.Ripple">
            <summary>
            Gets Ripple flavor.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base58.Flickr">
            <summary>
            Gets Flickr flavor.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base58.Alphabet">
            <summary>
            Gets the encoding alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base58.ZeroChar">
            <summary>
            Gets the character for zero.
            </summary>
        </member>
        <member name="M:Conflux.Address.Base58.GetSafeByteCountForDecoding(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base58.GetSafeByteCountForDecoding(System.Int32,System.Int32)">
            <summary>
            Retrieve safe byte count while avoiding multiple counting operations.
            </summary>
            <param name="textLen">Length of text.</param>
            <param name="numZeroes">Number of prefix zeroes.</param>
            <returns>Length of safe allocation.</returns>
        </member>
        <member name="M:Conflux.Address.Base58.GetSafeCharCountForEncoding(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base58.Encode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode to Base58 representation.
            </summary>
            <param name="bytes">Bytes to encode.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Conflux.Address.Base58.Decode(System.ReadOnlySpan{System.Char})">
            <summary>
            Decode a Base58 representation.
            </summary>
            <param name="text">Base58 encoded text.</param>
            <returns>Array of decoded bytes.</returns>
        </member>
        <member name="M:Conflux.Address.Base58.TryEncode(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base58.TryDecode(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="T:Conflux.Address.Base58Alphabet">
            <summary>
            Base58 alphabet.
            </summary>
        </member>
        <member name="M:Conflux.Address.Base58Alphabet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conflux.Address.Base58Alphabet"/> class
            using a custom alphabet.
            </summary>
            <param name="alphabet">Alphabet to use.</param>
        </member>
        <member name="P:Conflux.Address.Base58Alphabet.Bitcoin">
            <summary>
            Gets Bitcoin alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base58Alphabet.Ripple">
            <summary>
            Gets Base58 alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base58Alphabet.Flickr">
            <summary>
            Gets Flickr alphabet.
            </summary>
        </member>
        <member name="T:Conflux.Address.Base85">
            <summary>
            Base58 encoding/decoding class.
            </summary>
        </member>
        <member name="M:Conflux.Address.Base85.#ctor(Conflux.Address.Base85Alphabet)">
            <summary>
            Initializes a new instance of the <see cref="T:Conflux.Address.Base85"/> class
            using a custom alphabet.
            </summary>
            <param name="alphabet">Alphabet to use.</param>
        </member>
        <member name="P:Conflux.Address.Base85.Z85">
            <summary>
            Gets Z85 flavor of Base85.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base85.Ascii85">
            <summary>
            Gets Ascii85 flavor of Base85.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base85.Alphabet">
            <summary>
            Gets the encoding alphabet.
            </summary>
        </member>
        <member name="M:Conflux.Address.Base85.GetSafeByteCountForDecoding(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base85.GetSafeCharCountForEncoding(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base85.Encode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode the given bytes into Base85.
            </summary>
            <param name="bytes">Bytes to encode.</param>
            <returns>Encoded text.</returns>
        </member>
        <member name="M:Conflux.Address.Base85.TryEncode(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.Base85.Encode(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encode a given stream into a text writer.
            </summary>
            <param name="input">Input stream.</param>
            <param name="output">Output writer.</param>
        </member>
        <member name="M:Conflux.Address.Base85.EncodeAsync(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encode a given stream into a text writer.
            </summary>
            <param name="input">Input stream.</param>
            <param name="output">Output writer.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Conflux.Address.Base85.Decode(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode a text reader into a stream.
            </summary>
            <param name="input">Input reader.</param>
            <param name="output">Output stream.</param>
        </member>
        <member name="M:Conflux.Address.Base85.DecodeAsync(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode a text reader into a stream.
            </summary>
            <param name="input">Input reader.</param>
            <param name="output">Output stream.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Conflux.Address.Base85.Decode(System.ReadOnlySpan{System.Char})">
            <summary>
            Decode given characters into bytes.
            </summary>
            <param name="text">Characters to decode.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="M:Conflux.Address.Base85.TryDecode(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="T:Conflux.Address.Base85Alphabet">
            <summary>
            Base85 Alphabet.
            </summary>
        </member>
        <member name="M:Conflux.Address.Base85Alphabet.#ctor(System.String,System.Nullable{System.Char},System.Nullable{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:Conflux.Address.Base85Alphabet"/> class
            using custom settings.
            </summary>
            <param name="alphabet">Alphabet to use.</param>
            <param name="allZeroShortcut">Character to substitute for all zero.</param>
            <param name="allSpaceShortcut">Character to substitute for all space.</param>
        </member>
        <member name="P:Conflux.Address.Base85Alphabet.Z85">
            <summary>
            Gets ZeroMQ Z85 Alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base85Alphabet.Ascii85">
            <summary>
            Gets Adobe Ascii85 Alphabet (each character is directly produced by raw value + 33),
            also known as "btoa" encoding.
            </summary>
        </member>
        <member name="P:Conflux.Address.Base85Alphabet.AllZeroShortcut">
            <summary>
            Gets the character to be used for "all zeros".
            </summary>
        </member>
        <member name="P:Conflux.Address.Base85Alphabet.AllSpaceShortcut">
            <summary>
            Gets the character to be used for "all spaces".
            </summary>
        </member>
        <member name="P:Conflux.Address.Base85Alphabet.HasShortcut">
            <summary>
            Gets a value indicating whether the alphabet uses one of shortcut characters for all spaces
            or all zeros.
            </summary>
        </member>
        <member name="T:Conflux.Address.EncodingAlphabet">
            <summary>
            A single encoding algorithm can support many different alphabets.
            EncodingAlphabet consists of a basis for implementing different
            alphabets for different encodings. It's suitable if you want to
            implement your own encoding based on the existing base classes.
            </summary>
        </member>
        <member name="F:Conflux.Address.EncodingAlphabet.maxLength">
            <summary>
            Specifies the highest possible char value in an encoding alphabet
            Any char above with would raise an exception.
            </summary>
        </member>
        <member name="F:Conflux.Address.EncodingAlphabet.reverseLookupTable">
            <summary>
            Holds a mapping from character to an actual byte value
            The values are held as "value + 1" so a zero would denote "not set"
            and would cause an exception.
            </summary>
            <remarks>byte[] has no discernible perf impact and saves memory.</remarks>
        </member>
        <member name="M:Conflux.Address.EncodingAlphabet.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conflux.Address.EncodingAlphabet"/> class.
            </summary>
            <param name="length">Length of the alphabe.</param>
            <param name="alphabet">Alphabet character.</param>
        </member>
        <member name="P:Conflux.Address.EncodingAlphabet.Length">
            <summary>
            Gets the length of the alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.EncodingAlphabet.Value">
            <summary>
            Gets the characters of the alphabet.
            </summary>
        </member>
        <member name="M:Conflux.Address.EncodingAlphabet.InvalidCharacter(System.Char)">
            <summary>
            Generates a standard invalid character exception for alphabets.
            </summary>
            <remarks>
            The reason this is not a throwing method itself is
            that the compiler has no way of knowing whether the execution
            will end after the method call and can incorrectly assume
            reachable code.
            </remarks>
            <param name="c">Characters.</param>
            <returns>Exception to be thrown.</returns>
        </member>
        <member name="M:Conflux.Address.EncodingAlphabet.ToString">
            <summary>
            Get the string representation of the alphabet.
            </summary>
            <returns>The characters of the encoding alphabet.</returns>
        </member>
        <member name="M:Conflux.Address.EncodingAlphabet.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Conflux.Address.EncodingAlphabet.Map(System.Char,System.Int32)">
            <summary>
            Map a character to a value.
            </summary>
            <param name="c">Characters.</param>
            <param name="value">Corresponding value.</param>
        </member>
        <member name="T:Conflux.Address.IBaseEncoder">
            <summary>
            Basic encoding functionality.
            </summary>
        </member>
        <member name="M:Conflux.Address.IBaseEncoder.Encode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode a buffer to base-encoded representation.
            </summary>
            <param name="bytes">Bytes to encode.</param>
            <returns>Base16 string.</returns>
        </member>
        <member name="M:Conflux.Address.IBaseEncoder.Decode(System.ReadOnlySpan{System.Char})">
            <summary>
            Decode base-encoded text into bytes.
            </summary>
            <param name="text">Base16 text.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="T:Conflux.Address.IBaseStreamEncoder">
            <summary>
            Stream-based encoding functionality.
            </summary>
        </member>
        <member name="M:Conflux.Address.IBaseStreamEncoder.Encode(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encodes stream of bytes into base-encoded text.
            </summary>
            <param name="input">Stream that provides bytes to be encoded.</param>
            <param name="output">Stream that the encoded text is written to.</param>
        </member>
        <member name="M:Conflux.Address.IBaseStreamEncoder.EncodeAsync(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encodes stream of bytes into base-encoded text.
            </summary>
            <param name="input">Stream that provides bytes to be encoded.</param>
            <param name="output">Stream that the encoded text is written to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Conflux.Address.IBaseStreamEncoder.Decode(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode base-encoded text through streams. Stream based variant tries to consume
            as little memory as possible, and relies of .NET's own underlying buffering mechanisms,
            contrary to their buffer-based versions.
            </summary>
            <param name="input">Stream that the encoded bytes would be read from.</param>
            <param name="output">Stream where decoded bytes will be written to.</param>
        </member>
        <member name="M:Conflux.Address.IBaseStreamEncoder.DecodeAsync(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode base-encoded text through streams. Stream based variant tries to consume
            as little memory as possible, and relies of .NET's own underlying buffering mechanisms,
            contrary to their buffer-based versions.
            </summary>
            <param name="input">Stream that the encoded bytes would be read from.</param>
            <param name="output">Stream where decoded bytes will be written to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Conflux.Address.IEncodingAlphabet">
            <summary>
            Defines basic encoding alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.IEncodingAlphabet.Value">
            <summary>
            Gets the characters in the alphabet.
            </summary>
        </member>
        <member name="P:Conflux.Address.IEncodingAlphabet.Length">
            <summary>
            Gets the length of the alphabet.
            </summary>
        </member>
        <member name="T:Conflux.Address.INonAllocatingBaseEncoder">
            <summary>
            Efficient encoding functionality using pre-allocated memory buffers by the callers.
            </summary>
        </member>
        <member name="M:Conflux.Address.INonAllocatingBaseEncoder.TryEncode(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@)">
            <summary>
            Encode a buffer into a base-encoded representation using pre-allocated buffers.
            </summary>
            <param name="input">Bytes to encode.</param>
            <param name="output">Output buffer.</param>
            <param name="numCharsWritten">Actual number of characters written to the output.</param>
            <returns>Whether encoding was successful or not. If false, <paramref name="numCharsWritten"/>
            will be zero and the content of <paramref name="output"/> will be undefined.</returns>
        </member>
        <member name="M:Conflux.Address.INonAllocatingBaseEncoder.TryDecode(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)">
            <summary>
            Decode an encoded character buffer into a pre-allocated output buffer.
            </summary>
            <param name="input">Encoded text.</param>
            <param name="output">Output buffer.</param>
            <param name="numBytesWritten">Actual number of bytes written to the output.</param>
            <returns>Whether decoding was successful. If false, the value of <paramref name="numBytesWritten"/>
            will be zero and the content of <paramref name="output"/> will be undefined.</returns>
        </member>
        <member name="M:Conflux.Address.INonAllocatingBaseEncoder.GetSafeByteCountForDecoding(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets a safe estimation about how many bytes decoding will take without performing
            the actual decoding operation. The estimation can be slightly larger than the actual
            output size.
            </summary>
            <param name="text">Text to be decoded.</param>
            <returns>Number of estimated bytes, or zero if the input length is invalid.</returns>
        </member>
        <member name="M:Conflux.Address.INonAllocatingBaseEncoder.GetSafeCharCountForEncoding(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets a safe estimation about how many characters encoding a buffer will take without
            performing the actual encoding operation. The estimation can be slightly larger than the
            actual output size.
            </summary>
            <param name="buffer">Bytes to be encoded.</param>
            <returns>Number of estimated characters, or zero if the input length is invalid.</returns>
        </member>
        <member name="T:Conflux.Address.StreamHelper">
            <summary>
            Provides Stream functionality to any buffer-based encoding operation.
            </summary>
        </member>
    </members>
</doc>
